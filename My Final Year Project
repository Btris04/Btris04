{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":78156,"sourceType":"datasetVersion","datasetId":44109}],"dockerImageVersionId":30732,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/beatriceifeoluwa/my-project?scriptVersionId=188992606\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"#importing libraries\nimport numpy as np\nimport pandas  as pd \nimport os  \nimport matplotlib.pyplot as plt \nimport seaborn  as sns \nimport warnings\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import classification_report\nfrom tensorflow.keras.models import load_model\nfrom sklearn.metrics import confusion_matrix\nfrom tensorflow.keras.metrics import MeanAbsoluteError\nfrom tqdm.notebook import  tqdm \nwarnings.filterwarnings('ignore')\nfrom pathlib import Path\nfrom PIL import Image\n%matplotlib inline\nimport tensorflow as tf\nfrom keras.preprocessing.image import load_img\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D, Input\nfrom keras.metrics import Accuracy, Precision, Recall, F1Score\nprint(\"Done\") ","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:15:03.820328Z","iopub.execute_input":"2024-07-12T10:15:03.820839Z","iopub.status.idle":"2024-07-12T10:15:25.695437Z","shell.execute_reply.started":"2024-07-12T10:15:03.820792Z","shell.execute_reply":"2024-07-12T10:15:25.694635Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Setting the base directory path.\nbase_dir = '../input/utkface-new/UTKFace/'","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:15:25.718181Z","iopub.execute_input":"2024-07-12T10:15:25.719276Z","iopub.status.idle":"2024-07-12T10:15:25.731579Z","shell.execute_reply.started":"2024-07-12T10:15:25.719242Z","shell.execute_reply":"2024-07-12T10:15:25.730808Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#  age and gender and  ethnicity  \nimage_paths  = []\nage_label = []\ngender_lab = []\n\n#go inside  this dir  and get each file \nfor  filename in  tqdm(os.listdir(base_dir)):\n    image_path =  os.path.join(base_dir ,  filename) \n    temp = filename.split('_') # in the data set the age is  included  in it \n    age =  int(temp[0])\n    gender =  int(temp[1]) \n    image_paths.append(image_path)\n    age_label.append(age)\n    gender_lab.append(gender)\n    ","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:15:25.734014Z","iopub.execute_input":"2024-07-12T10:15:25.734601Z","iopub.status.idle":"2024-07-12T10:15:26.301157Z","shell.execute_reply.started":"2024-07-12T10:15:25.734569Z","shell.execute_reply":"2024-07-12T10:15:26.300185Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Convert to dataframe\ndf =  pd.DataFrame()\ndf['image'] =  image_paths \ndf['age'] =  age_label\ndf['gender'] =  gender_lab \n\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:15:26.302515Z","iopub.execute_input":"2024-07-12T10:15:26.303157Z","iopub.status.idle":"2024-07-12T10:15:26.361937Z","shell.execute_reply.started":"2024-07-12T10:15:26.303122Z","shell.execute_reply":"2024-07-12T10:15:26.360884Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Viewing data info\ndf.info()","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:15:26.363214Z","iopub.execute_input":"2024-07-12T10:15:26.363582Z","iopub.status.idle":"2024-07-12T10:15:26.395911Z","shell.execute_reply.started":"2024-07-12T10:15:26.363545Z","shell.execute_reply":"2024-07-12T10:15:26.394971Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Plotting gender counts with Seaborn.\nsns.countplot(data=df, x='gender')","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:15:26.397074Z","iopub.execute_input":"2024-07-12T10:15:26.397381Z","iopub.status.idle":"2024-07-12T10:15:26.674619Z","shell.execute_reply.started":"2024-07-12T10:15:26.397359Z","shell.execute_reply":"2024-07-12T10:15:26.673771Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Creating an age distribution histogram with KDE.\nplt.figure(figsize=(12, 6))\nsns.histplot(df['age'], kde=True, bins=50, color='blue', alpha=0.7)\nplt.title('Age Distribution with KDE')\nplt.xlabel('Age')\nplt.ylabel('Frequency')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:15:26.67568Z","iopub.execute_input":"2024-07-12T10:15:26.675958Z","iopub.status.idle":"2024-07-12T10:15:27.265619Z","shell.execute_reply.started":"2024-07-12T10:15:26.675937Z","shell.execute_reply":"2024-07-12T10:15:27.264651Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Creating a gender distribution histogram with KDE.\nplt.figure(figsize=(12, 6))\nsns.histplot(df['gender'], kde=True, bins=50, color='blue', alpha=0.7)\nplt.title('Gender Distribution with KDE')\nplt.xlabel('Gender')\nplt.ylabel('Frequency')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:15:27.266848Z","iopub.execute_input":"2024-07-12T10:15:27.267175Z","iopub.status.idle":"2024-07-12T10:15:27.765696Z","shell.execute_reply.started":"2024-07-12T10:15:27.26715Z","shell.execute_reply":"2024-07-12T10:15:27.764671Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Listing all JPG filenames in directory.\npath = Path(\"../input/utkface-new/UTKFace\")\nfilenames = list(map(lambda x: x.name, path.glob('*.jpg')))","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:15:27.769194Z","iopub.execute_input":"2024-07-12T10:15:27.769477Z","iopub.status.idle":"2024-07-12T10:15:27.857795Z","shell.execute_reply.started":"2024-07-12T10:15:27.769453Z","shell.execute_reply":"2024-07-12T10:15:27.857046Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Viewing length of filenames\nprint(len(filenames))","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:15:27.858786Z","iopub.execute_input":"2024-07-12T10:15:27.859064Z","iopub.status.idle":"2024-07-12T10:15:27.863822Z","shell.execute_reply.started":"2024-07-12T10:15:27.859042Z","shell.execute_reply":"2024-07-12T10:15:27.862884Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Viewing examples of filenames\nprint(filenames[:5])","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:15:27.865319Z","iopub.execute_input":"2024-07-12T10:15:27.86565Z","iopub.status.idle":"2024-07-12T10:15:27.875431Z","shell.execute_reply.started":"2024-07-12T10:15:27.865626Z","shell.execute_reply":"2024-07-12T10:15:27.874631Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Shuffling the data\nnp.random.seed(42)\nnp.random.shuffle(filenames)","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:15:27.876463Z","iopub.execute_input":"2024-07-12T10:15:27.876782Z","iopub.status.idle":"2024-07-12T10:15:27.887588Z","shell.execute_reply.started":"2024-07-12T10:15:27.876753Z","shell.execute_reply":"2024-07-12T10:15:27.886719Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Separating age and gender\nage_labels, gender_labels, image_path = [], [], []\nfor filename in filenames:\n    image_path.append(filename)\n    temp = filename.split('_')\n    age_labels.append(temp[0])\n    gender_labels.append(temp[1])\n","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:15:27.888812Z","iopub.execute_input":"2024-07-12T10:15:27.889262Z","iopub.status.idle":"2024-07-12T10:15:27.920414Z","shell.execute_reply.started":"2024-07-12T10:15:27.88923Z","shell.execute_reply":"2024-07-12T10:15:27.919205Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Creating new dataframe 'data' with just 'image', 'age', and 'gender' columns\ndata = pd.DataFrame()\ndata['image'], data['age'], data['gender'] = image_path, age_labels, gender_labels\n","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:15:27.921652Z","iopub.execute_input":"2024-07-12T10:15:27.922012Z","iopub.status.idle":"2024-07-12T10:15:27.935219Z","shell.execute_reply.started":"2024-07-12T10:15:27.921978Z","shell.execute_reply":"2024-07-12T10:15:27.934345Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# gender age  dict  \ngender_dict = {0 :\"Male\" , 1:\"Female\"}\n","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:15:27.936517Z","iopub.execute_input":"2024-07-12T10:15:27.936845Z","iopub.status.idle":"2024-07-12T10:15:27.94132Z","shell.execute_reply.started":"2024-07-12T10:15:27.936797Z","shell.execute_reply":"2024-07-12T10:15:27.940507Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Viewing dtypes prior to preprocessing\nprint(data.dtypes)","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:15:27.942554Z","iopub.execute_input":"2024-07-12T10:15:27.942896Z","iopub.status.idle":"2024-07-12T10:15:27.952059Z","shell.execute_reply.started":"2024-07-12T10:15:27.942867Z","shell.execute_reply":"2024-07-12T10:15:27.951117Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Opening and displaying an image from DataFrame.\nfrom PIL import  Image \nimg =  Image.open(df['image'][2])\nplt.axis('off')\nplt.imshow(img)  ","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:15:27.953254Z","iopub.execute_input":"2024-07-12T10:15:27.953617Z","iopub.status.idle":"2024-07-12T10:15:28.148411Z","shell.execute_reply.started":"2024-07-12T10:15:27.953586Z","shell.execute_reply":"2024-07-12T10:15:28.147506Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#see the age  Distribution\nsns.distplot(df['age']) ","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:15:28.149417Z","iopub.execute_input":"2024-07-12T10:15:28.149729Z","iopub.status.idle":"2024-07-12T10:15:28.612421Z","shell.execute_reply.started":"2024-07-12T10:15:28.149702Z","shell.execute_reply":"2024-07-12T10:15:28.611498Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Plotting gender distribution with Seaborn.\nsns.distplot(df['gender'])","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:15:28.613758Z","iopub.execute_input":"2024-07-12T10:15:28.614155Z","iopub.status.idle":"2024-07-12T10:15:29.062701Z","shell.execute_reply.started":"2024-07-12T10:15:28.614122Z","shell.execute_reply":"2024-07-12T10:15:29.06174Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Viewing data info\ndata.info()","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:15:29.063815Z","iopub.execute_input":"2024-07-12T10:15:29.064111Z","iopub.status.idle":"2024-07-12T10:15:29.08378Z","shell.execute_reply.started":"2024-07-12T10:15:29.064088Z","shell.execute_reply":"2024-07-12T10:15:29.082875Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Setting figure size and selecting first 15 files.\nplt.figure(figsize=(20,20))\nfiles =  df.iloc[0:15]\n \n#Creating a 5x5 grid of images with titles.    \nfor index , file , age , gender  in files.itertuples():\n    plt.subplot(5,5,index+1)\n    img =  load_img(file)\n    img =  np.array(img)\n    plt.imshow(img)\n    plt.title(f\"age : {age} , gender : {gender_dict[gender]}\")\n    plt.axis(\"off\") \n    \n    ","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:15:29.085129Z","iopub.execute_input":"2024-07-12T10:15:29.085403Z","iopub.status.idle":"2024-07-12T10:15:31.632924Z","shell.execute_reply.started":"2024-07-12T10:15:29.08538Z","shell.execute_reply":"2024-07-12T10:15:31.631774Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#feature extraction\ndef extract_features(images):\n    features = []\n    for image in tqdm(images):\n        img = load_img(image, color_mode='grayscale')\n        img = img.resize((128, 128), Image.ANTIALIAS)\n        img = np.array(img)\n        features.append(img)\n        \n    features = np.array(features)\n    # ignore this step if using RGB\n    features = features.reshape(len(features), 128, 128, 1)\n    return features","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:15:31.634052Z","iopub.execute_input":"2024-07-12T10:15:31.634321Z","iopub.status.idle":"2024-07-12T10:15:31.640258Z","shell.execute_reply.started":"2024-07-12T10:15:31.634298Z","shell.execute_reply":"2024-07-12T10:15:31.639497Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#  lets get the extract  images  input \nx =  extract_features(df['image'])","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:15:31.641344Z","iopub.execute_input":"2024-07-12T10:15:31.641587Z","iopub.status.idle":"2024-07-12T10:18:43.453569Z","shell.execute_reply.started":"2024-07-12T10:15:31.641565Z","shell.execute_reply":"2024-07-12T10:18:43.452758Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#  check the  shape  and  then normalising the images  \nx.shape \nx =  x/255.0 \ny_gender  =  np.array(df['gender'])\ny_age =  np.array(df['age']) \ninput_shape  =  (128 ,128, 1)\nprint(\"done\")\n","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:18:43.45511Z","iopub.execute_input":"2024-07-12T10:18:43.455381Z","iopub.status.idle":"2024-07-12T10:18:44.388133Z","shell.execute_reply.started":"2024-07-12T10:18:43.455358Z","shell.execute_reply":"2024-07-12T10:18:44.387218Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Configuring image augmentation with TensorFlow.\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\ndatagen = ImageDataGenerator(\n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    horizontal_flip=True\n)\ndatagen.fit(x)","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:18:44.389235Z","iopub.execute_input":"2024-07-12T10:18:44.389512Z","iopub.status.idle":"2024-07-12T10:18:45.537044Z","shell.execute_reply.started":"2024-07-12T10:18:44.389488Z","shell.execute_reply":"2024-07-12T10:18:45.536241Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#lets create our model\nfrom keras.layers import BatchNormalization\n\ninputs = Input((input_shape))\nconv_1 = Conv2D(32, kernel_size=(3, 3), activation='relu') (inputs)\nbatch_norm_1 = BatchNormalization()(conv_1)\nmaxp_1 = MaxPooling2D(pool_size=(2, 2)) (batch_norm_1)\n\nconv_2 = Conv2D(64, kernel_size=(3, 3), activation='relu') (maxp_1)\nbatch_norm_2 = BatchNormalization()(conv_2)\nmaxp_2 = MaxPooling2D(pool_size=(2, 2)) (batch_norm_2)\n\nconv_3 = Conv2D(128, kernel_size=(3, 3), activation='relu') (maxp_2)\nbatch_norm_3 = BatchNormalization()(conv_3)\nmaxp_3 = MaxPooling2D(pool_size=(2, 2)) (batch_norm_3)\n\nconv_4 = Conv2D(256, kernel_size=(3, 3), activation='relu') (maxp_3)\nbatch_norm_4 = BatchNormalization()(conv_4)\nmaxp_4 = MaxPooling2D(pool_size=(2, 2)) (batch_norm_4)\n\nflatten = Flatten() (maxp_4)\n\ndense_1 = Dense(256, activation='relu') (flatten)\ndropout_1 = Dropout(0.4) (dense_1)\noutput_1 = Dense(1, activation='sigmoid', name='gender_out') (dropout_1)\n\ndense_2 = Dense(256, activation='relu') (flatten)\ndropout_2 = Dropout(0.4) (dense_2)\noutput_2 = Dense(1, activation='relu', name='age_out') (dropout_2)\n\nmodel = Model(inputs=[inputs], outputs=[output_1, output_2])\n\nfrom keras.optimizers import Adam\n\n\nmodel.compile(loss=['binary_crossentropy', 'mean_absolute_error'], optimizer= Adam(), metrics=['accuracy', 'mean_absolute_error'])","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:18:45.53815Z","iopub.execute_input":"2024-07-12T10:18:45.538435Z","iopub.status.idle":"2024-07-12T10:18:46.774022Z","shell.execute_reply.started":"2024-07-12T10:18:45.538411Z","shell.execute_reply":"2024-07-12T10:18:46.773244Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Displaying the model's architecture summary.\nmodel.summary()","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:18:46.778309Z","iopub.execute_input":"2024-07-12T10:18:46.778594Z","iopub.status.idle":"2024-07-12T10:18:46.820929Z","shell.execute_reply.started":"2024-07-12T10:18:46.77857Z","shell.execute_reply":"2024-07-12T10:18:46.820028Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#lets plot the model  using keras \n\nfrom tensorflow.keras.utils  import  plot_model \nplot_model(model)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:18:46.822227Z","iopub.execute_input":"2024-07-12T10:18:46.822607Z","iopub.status.idle":"2024-07-12T10:18:47.398173Z","shell.execute_reply.started":"2024-07-12T10:18:46.822574Z","shell.execute_reply":"2024-07-12T10:18:47.39729Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Concatenate y_gender and y_age into a single array\ny_combined = np.column_stack((y_gender, y_age))\n\n# Split the dataset into training and temporary sets\nX_train, X_temp, y_combined_train, y_combined_temp = train_test_split(x, y_combined, test_size=0.2, random_state=42)\n\n#From the remaining part, split into 50% testing and 50% validation.\nX_test, X_val, y_combined_test, y_combined_val = train_test_split(X_temp, y_combined_temp, test_size=0.5, random_state=42)\n\n# Split y_combined back into y_gender and y_age\ny_train_gender, y_train_age = y_combined_train[:, 0], y_combined_train[:, 1]\ny_test_gender, y_test_age = y_combined_test[:, 0], y_combined_test[:, 1]\ny_val_gender, y_val_age = y_combined_val[:, 0], y_combined_val[:, 1]","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:18:47.399461Z","iopub.execute_input":"2024-07-12T10:18:47.399989Z","iopub.status.idle":"2024-07-12T10:18:48.451732Z","shell.execute_reply.started":"2024-07-12T10:18:47.399806Z","shell.execute_reply":"2024-07-12T10:18:48.450659Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Counting and printing the total number of images.\ntotal_images = len(image_paths)\nprint(f\"Total number of images: {total_images}\")\n\n# Compute number of images in each set\ntrain_images = len(X_train)\nvalidation_images = len(X_val)\ntest_images = len(X_test)\n\nprint(f\"Number of training images: {train_images}\")\nprint(f\"Number of validation images: {validation_images}\")\nprint(f\"Number of test images: {test_images}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:18:48.453053Z","iopub.execute_input":"2024-07-12T10:18:48.453495Z","iopub.status.idle":"2024-07-12T10:18:48.460079Z","shell.execute_reply.started":"2024-07-12T10:18:48.45346Z","shell.execute_reply":"2024-07-12T10:18:48.459133Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Enabling eager execution for TensorFlow functions.\ntf.config.run_functions_eagerly(True)\n\n# Convert target values to float32\ny_train_age = y_train_age.astype(np.float32)\ny_val_age = y_val_age.astype(np.float32)\ny_train_gender = y_train_gender.astype(np.float32) # Convert y_train_gender to float32\ny_val_gender = y_val_gender.astype(np.float32) # Convert y_val_gender to float32\n\n# train model    \nhistory = model.fit(x=x , y=[y_gender, y_age], batch_size=32, epochs=30, validation_data=(X_val, [y_val_gender, y_val_age]))","metadata":{"execution":{"iopub.status.busy":"2024-07-12T10:19:01.46106Z","iopub.execute_input":"2024-07-12T10:19:01.461417Z","iopub.status.idle":"2024-07-12T11:28:44.401609Z","shell.execute_reply.started":"2024-07-12T10:19:01.46139Z","shell.execute_reply":"2024-07-12T11:28:44.400621Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Plot training history\nacc = history.history['gender_out_accuracy']\nval_acc = history.history['val_gender_out_accuracy']\nmae = history.history['age_out_mean_absolute_error']\nval_mae = history.history['val_age_out_mean_absolute_error']\nepochs = range(len(acc))","metadata":{"execution":{"iopub.status.busy":"2024-07-12T11:35:58.92867Z","iopub.execute_input":"2024-07-12T11:35:58.929288Z","iopub.status.idle":"2024-07-12T11:35:58.934721Z","shell.execute_reply.started":"2024-07-12T11:35:58.929258Z","shell.execute_reply":"2024-07-12T11:35:58.933694Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Evaluate the model on the test data\nresults = model.evaluate(X_test, {'gender_out': y_test_gender, 'age_out': y_test_age})","metadata":{"execution":{"iopub.status.busy":"2024-07-12T11:36:02.259971Z","iopub.execute_input":"2024-07-12T11:36:02.26032Z","iopub.status.idle":"2024-07-12T11:36:05.043298Z","shell.execute_reply.started":"2024-07-12T11:36:02.260294Z","shell.execute_reply":"2024-07-12T11:36:05.04235Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#  this show the loss accuracy  in the model for gender  \nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(len(loss))\n\nplt.plot(epochs, loss, 'b', label='Training Loss')\nplt.plot(epochs, val_loss, 'r', label='Validation Loss')\nplt.title('Loss Graph')\nplt.legend()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-12T11:36:11.117753Z","iopub.execute_input":"2024-07-12T11:36:11.118114Z","iopub.status.idle":"2024-07-12T11:36:11.319161Z","shell.execute_reply.started":"2024-07-12T11:36:11.118086Z","shell.execute_reply":"2024-07-12T11:36:11.318284Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#  this show the loss accuracy  in the model for age \nloss = history.history['age_out_mean_absolute_error']\nval_loss = history.history['val_age_out_mean_absolute_error']  ##  this data taken  from  the epochs  \nepochs = range(len(loss))\n\nplt.plot(epochs, loss, 'b', label='Training MAE')\nplt.plot(epochs, val_loss, 'r', label='Validation MAE')\nplt.title('Loss Graph')\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-12T11:36:35.918406Z","iopub.execute_input":"2024-07-12T11:36:35.918783Z","iopub.status.idle":"2024-07-12T11:36:36.234733Z","shell.execute_reply.started":"2024-07-12T11:36:35.918752Z","shell.execute_reply":"2024-07-12T11:36:36.233698Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# this show the loss accuracy  in the model for age \nloss = history.history['gender_out_accuracy']\nval_loss = history.history['val_gender_out_accuracy']  ##  this data taken  from  the epochs  \nepochs = range(len(loss))\n\nplt.plot(epochs, loss, 'b', label='Training Accuracy')\nplt.plot(epochs, val_loss, 'r', label='Validation Accuracy')\nplt.title('Gender Loss')\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-12T11:36:41.218169Z","iopub.execute_input":"2024-07-12T11:36:41.218792Z","iopub.status.idle":"2024-07-12T11:36:41.462219Z","shell.execute_reply.started":"2024-07-12T11:36:41.218757Z","shell.execute_reply":"2024-07-12T11:36:41.461388Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Importing metrics for model evaluation.\nfrom sklearn.metrics import accuracy_score, mean_absolute_error, confusion_matrix, ConfusionMatrixDisplay\n\n# Assuming model, X_test, y_gender_test, and y_age_test are defined as in the previous code\n\n# Predict the labels for the test set\ny_pred = model.predict(X_test)\ny_pred_gender = y_pred[0]  # Predictions for gender\ny_pred_age = y_pred[1]     # Predictions for age\n\n# Convert the predicted probabilities to binary labels for gender\ny_pred_gender_classes = (y_pred_gender > 0.5).astype(\"int32\")\n\n# Compute the accuracy for gender\ngender_accuracy = accuracy_score(y_test_gender, y_pred_gender_classes)\n\n# Compute the MAE for age\nage_mae = mean_absolute_error(y_test_age, y_pred_age)\n\n# Print the results\nprint(\"Gender Accuracy:\", gender_accuracy)\nprint(\"Age MAE:\", age_mae)","metadata":{"execution":{"iopub.status.busy":"2024-07-12T11:37:49.130586Z","iopub.execute_input":"2024-07-12T11:37:49.131412Z","iopub.status.idle":"2024-07-12T11:37:51.072484Z","shell.execute_reply.started":"2024-07-12T11:37:49.131362Z","shell.execute_reply":"2024-07-12T11:37:51.071548Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Calculating the confusion matrix for gender predictions.\ncm = confusion_matrix(y_test_gender, y_pred_gender_classes)","metadata":{"execution":{"iopub.status.busy":"2024-07-12T11:37:54.053314Z","iopub.execute_input":"2024-07-12T11:37:54.053676Z","iopub.status.idle":"2024-07-12T11:37:54.060105Z","shell.execute_reply.started":"2024-07-12T11:37:54.053645Z","shell.execute_reply":"2024-07-12T11:37:54.059363Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Displaying the confusion matrix with a blue color map.\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm)\ndisp.plot(cmap=plt.cm.Blues)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-12T11:37:57.166016Z","iopub.execute_input":"2024-07-12T11:37:57.166335Z","iopub.status.idle":"2024-07-12T11:37:57.427496Z","shell.execute_reply.started":"2024-07-12T11:37:57.166312Z","shell.execute_reply":"2024-07-12T11:37:57.426585Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Get predictions from the model\ny_pred = model.predict(X_test)\ny_pred_gender = y_pred[0] ","metadata":{"execution":{"iopub.status.busy":"2024-07-12T11:38:02.778996Z","iopub.execute_input":"2024-07-12T11:38:02.779629Z","iopub.status.idle":"2024-07-12T11:38:04.66894Z","shell.execute_reply.started":"2024-07-12T11:38:02.7796Z","shell.execute_reply":"2024-07-12T11:38:04.667842Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Printing shapes of true and predicted labels.\nprint(f\"True labels shape: {y_test_gender.shape}\")\nprint(f\"Predicted labels shape: {y_pred_gender_classes.shape}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-12T11:38:08.943619Z","iopub.execute_input":"2024-07-12T11:38:08.943986Z","iopub.status.idle":"2024-07-12T11:38:08.948652Z","shell.execute_reply.started":"2024-07-12T11:38:08.943957Z","shell.execute_reply":"2024-07-12T11:38:08.947629Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Print the classification report\nreport = classification_report(y_test_gender, y_pred_gender_classes)\nprint(report)","metadata":{"execution":{"iopub.status.busy":"2024-07-12T11:38:11.971394Z","iopub.execute_input":"2024-07-12T11:38:11.971849Z","iopub.status.idle":"2024-07-12T11:38:11.987437Z","shell.execute_reply.started":"2024-07-12T11:38:11.971798Z","shell.execute_reply":"2024-07-12T11:38:11.986502Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Displaying original and predicted gender and age for a specific image.\nimage_index =  1800\nprint(\"original_gender\" ,  gender_dict[y_gender[image_index]])\nprint(\"original_age\" ,  y_age[image_index])\n\npred =  model.predict(x[image_index].reshape(1,128 , 128 , 1))\nprint(pred[0][0][0])\npred_gender =  gender_dict[round(pred[0][0][0])]  #  first one is gender  \npred_age =  round(pred[1][0][0])  ##  sec is age \n\nprint(\"predict gender :\" ,  pred_gender , \" predict_age : \" ,  pred_age)\n\n\nplt.imshow(x[image_index].reshape(128 , 128) , cmap='gray')","metadata":{"execution":{"iopub.status.busy":"2024-07-12T11:38:18.379309Z","iopub.execute_input":"2024-07-12T11:38:18.380005Z","iopub.status.idle":"2024-07-12T11:38:19.111668Z","shell.execute_reply.started":"2024-07-12T11:38:18.379975Z","shell.execute_reply":"2024-07-12T11:38:19.110843Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"image_index =  900\nprint(\"original_gender\" ,  gender_dict[y_gender[image_index]])\nprint(\"original_age\" ,  y_age[image_index])\n\npred =  model.predict(x[image_index].reshape(1,128 , 128 , 1))\nprint(pred[0][0][0])\npred_gender =  gender_dict[round(pred[0][0][0])]  #  first one is gender  \npred_age =  round(pred[1][0][0])  ##  sec is age \n\nprint(\"predict gender :\" ,  pred_gender , \" predict_age : \" ,  pred_age)\n\n\nplt.imshow(x[image_index].reshape(128 , 128) , cmap='gray') ","metadata":{"execution":{"iopub.status.busy":"2024-07-12T11:38:22.416977Z","iopub.execute_input":"2024-07-12T11:38:22.417377Z","iopub.status.idle":"2024-07-12T11:38:22.795077Z","shell.execute_reply.started":"2024-07-12T11:38:22.417346Z","shell.execute_reply":"2024-07-12T11:38:22.794176Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"image_index =  4567\nprint(\"original_gender\" ,  gender_dict[y_gender[image_index]])\nprint(\"original_age\" ,  y_age[image_index])\n\npred =  model.predict(x[image_index].reshape(1,128 , 128 , 1))\nprint(pred[0][0][0])\npred_gender =  gender_dict[round(pred[0][0][0])]  #  first one is gender  \npred_age =  round(pred[1][0][0])  ##  sec is age \n\nprint(\"predict gender :\" ,  pred_gender , \" predict_age : \" ,  pred_age)\n\n\nplt.imshow(x[image_index].reshape(128 , 128) , cmap='gray') ","metadata":{"execution":{"iopub.status.busy":"2024-07-12T11:41:54.162936Z","iopub.execute_input":"2024-07-12T11:41:54.163298Z","iopub.status.idle":"2024-07-12T11:41:54.549722Z","shell.execute_reply.started":"2024-07-12T11:41:54.16327Z","shell.execute_reply":"2024-07-12T11:41:54.548799Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"image_index =  10000\nprint(\"original_gender\" ,  gender_dict[y_gender[image_index]])\nprint(\"original_age\" ,  y_age[image_index])\n\npred =  model.predict(x[image_index].reshape(1,128 , 128 , 1))\nprint(pred[0][0][0])\npred_gender =  gender_dict[round(pred[0][0][0])]  #  first one is gender  \npred_age =  round(pred[1][0][0])  ##  sec is age \n\nprint(\"predict gender :\" ,  pred_gender , \" predict_age : \" ,  pred_age)\n\n\nplt.imshow(x[image_index].reshape(128 , 128) , cmap='gray')","metadata":{"execution":{"iopub.status.busy":"2024-07-12T11:42:02.685222Z","iopub.execute_input":"2024-07-12T11:42:02.686178Z","iopub.status.idle":"2024-07-12T11:42:03.073722Z","shell.execute_reply.started":"2024-07-12T11:42:02.686146Z","shell.execute_reply":"2024-07-12T11:42:03.072884Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"image_index =  5447\nprint(\"original_gender\" ,  gender_dict[y_gender[image_index]])\nprint(\"original_age\" ,  y_age[image_index])\n\npred =  model.predict(x[image_index].reshape(1,128 , 128 , 1))\nprint(pred[0][0][0])\npred_gender =  gender_dict[round(pred[0][0][0])]  #  first one is gender  \npred_age =  round(pred[1][0][0])  ##  sec is age \n\nprint(\"predict gender :\" ,  pred_gender , \" predict_age : \" ,  pred_age)\n\n\nplt.imshow(x[image_index].reshape(128 , 128) , cmap='gray')","metadata":{"execution":{"iopub.status.busy":"2024-07-12T11:51:28.158795Z","iopub.execute_input":"2024-07-12T11:51:28.159154Z","iopub.status.idle":"2024-07-12T11:51:28.539699Z","shell.execute_reply.started":"2024-07-12T11:51:28.159127Z","shell.execute_reply":"2024-07-12T11:51:28.538684Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"image_index =  500\nprint(\"original_gender\" ,  gender_dict[y_gender[image_index]])\nprint(\"original_age\" ,  y_age[image_index])\n\npred =  model.predict(x[image_index].reshape(1,128 , 128 , 1))\nprint(pred[0][0][0])\npred_gender =  gender_dict[round(pred[0][0][0])]  #  first one is gender  \npred_age =  round(pred[1][0][0])  ##  sec is age \n\nprint(\"predict gender :\" ,  pred_gender , \" predict_age : \" ,  pred_age)\n\n\nplt.imshow(x[image_index].reshape(128 , 128) , cmap='gray')","metadata":{"execution":{"iopub.status.busy":"2024-07-12T11:42:11.041506Z","iopub.execute_input":"2024-07-12T11:42:11.041876Z","iopub.status.idle":"2024-07-12T11:42:11.360228Z","shell.execute_reply.started":"2024-07-12T11:42:11.041847Z","shell.execute_reply":"2024-07-12T11:42:11.359351Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"image_index =  9700\nprint(\"original_gender\" ,  gender_dict[y_gender[image_index]])\nprint(\"original_age\" ,  y_age[image_index])\n\npred =  model.predict(x[image_index].reshape(1,128 , 128 , 1))\nprint(pred[0][0][0])\npred_gender =  gender_dict[round(pred[0][0][0])]  #  first one is gender  \npred_age =  round(pred[1][0][0])  ##  sec is age \n\nprint(\"predict gender :\" ,  pred_gender , \" predict_age : \" ,  pred_age)\n\n\nplt.imshow(x[image_index].reshape(128 , 128) , cmap='gray')","metadata":{"execution":{"iopub.status.busy":"2024-07-12T11:42:24.083583Z","iopub.execute_input":"2024-07-12T11:42:24.084061Z","iopub.status.idle":"2024-07-12T11:42:24.466212Z","shell.execute_reply.started":"2024-07-12T11:42:24.08401Z","shell.execute_reply":"2024-07-12T11:42:24.465329Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"image_index =  5000\nprint(\"original_gender\" ,  gender_dict[y_gender[image_index]])\nprint(\"original_age\" ,  y_age[image_index])\n\npred =  model.predict(x[image_index].reshape(1,128 , 128 , 1))\nprint(pred[0][0][0])\npred_gender =  gender_dict[round(pred[0][0][0])]  #  first one is gender  \npred_age =  round(pred[1][0][0])  ##  sec is age \n\nprint(\"predict gender :\" ,  pred_gender , \" predict_age : \" ,  pred_age)\n\n\nplt.imshow(x[image_index].reshape(128 , 128) , cmap='gray')","metadata":{"execution":{"iopub.status.busy":"2024-07-12T11:42:30.764489Z","iopub.execute_input":"2024-07-12T11:42:30.764859Z","iopub.status.idle":"2024-07-12T11:42:31.143387Z","shell.execute_reply.started":"2024-07-12T11:42:30.764828Z","shell.execute_reply":"2024-07-12T11:42:31.142535Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"image_index =  358\nprint(\"original_gender\" ,  gender_dict[y_gender[image_index]])\nprint(\"original_age\" ,  y_age[image_index])\n\npred =  model.predict(x[image_index].reshape(1,128 , 128 , 1))\nprint(pred[0][0][0])\npred_gender =  gender_dict[round(pred[0][0][0])]  #  first one is gender  \npred_age =  round(pred[1][0][0])  ##  sec is age \n\nprint(\"predict gender :\" ,  pred_gender , \" predict_age : \" ,  pred_age)\n\n\nplt.imshow(x[image_index].reshape(128 , 128) , cmap='gray') ","metadata":{"execution":{"iopub.status.busy":"2024-07-12T11:49:05.649193Z","iopub.execute_input":"2024-07-12T11:49:05.649555Z","iopub.status.idle":"2024-07-12T11:49:06.023604Z","shell.execute_reply.started":"2024-07-12T11:49:05.649523Z","shell.execute_reply":"2024-07-12T11:49:06.022692Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"image_index =  100\nprint(\"original_gender\" ,  gender_dict[y_gender[image_index]])\nprint(\"original_age\" ,  y_age[image_index])\n\npred =  model.predict(x[image_index].reshape(1,128 , 128 , 1))\nprint(pred[0][0][0])\npred_gender =  gender_dict[round(pred[0][0][0])]  #  first one is gender  \npred_age =  round(pred[1][0][0])  ##  sec is age \n\nprint(\"predict gender :\" ,  pred_gender , \" predict_age : \" ,  pred_age)\n\n\nplt.imshow(x[image_index].reshape(128 , 128) , cmap='gray') ","metadata":{"execution":{"iopub.status.busy":"2024-07-12T11:42:43.669774Z","iopub.execute_input":"2024-07-12T11:42:43.670474Z","iopub.status.idle":"2024-07-12T11:42:44.059117Z","shell.execute_reply.started":"2024-07-12T11:42:43.670444Z","shell.execute_reply":"2024-07-12T11:42:44.058189Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"image_index =  150\nprint(\"original_gender\" ,  gender_dict[y_gender[image_index]])\nprint(\"original_age\" ,  y_age[image_index])\n\npred =  model.predict(x[image_index].reshape(1,128 , 128 , 1))\nprint(pred[0][0][0])\npred_gender =  gender_dict[round(pred[0][0][0])]  #  first one is gender  \npred_age =  round(pred[1][0][0])  ##  sec is age \n\nprint(\"predict gender :\" ,  pred_gender , \" predict_age : \" ,  pred_age)\n\n\nplt.imshow(x[image_index].reshape(128 , 128) , cmap='gray') ","metadata":{"execution":{"iopub.status.busy":"2024-07-12T11:42:48.714486Z","iopub.execute_input":"2024-07-12T11:42:48.714871Z","iopub.status.idle":"2024-07-12T11:42:49.099316Z","shell.execute_reply.started":"2024-07-12T11:42:48.714816Z","shell.execute_reply":"2024-07-12T11:42:49.098477Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.save('my_model.h5')","metadata":{"execution":{"iopub.status.busy":"2024-07-12T11:42:54.047501Z","iopub.execute_input":"2024-07-12T11:42:54.048205Z","iopub.status.idle":"2024-07-12T11:42:54.229018Z","shell.execute_reply.started":"2024-07-12T11:42:54.048176Z","shell.execute_reply":"2024-07-12T11:42:54.227993Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Load the model from the HDF5 file\nmodel = load_model('my_model.h5')\nprint(\"HDF5 Model loaded successfully.\")\nprint(model.summary())","metadata":{"execution":{"iopub.status.busy":"2024-07-12T11:43:12.289559Z","iopub.execute_input":"2024-07-12T11:43:12.290244Z","iopub.status.idle":"2024-07-12T11:43:12.473388Z","shell.execute_reply.started":"2024-07-12T11:43:12.290213Z","shell.execute_reply":"2024-07-12T11:43:12.472584Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import shutil\nshutil.move('my_model.h5', '/kaggle/working/my_model.h5')","metadata":{"execution":{"iopub.status.busy":"2024-07-12T11:43:29.847459Z","iopub.execute_input":"2024-07-12T11:43:29.848167Z","iopub.status.idle":"2024-07-12T11:43:29.854154Z","shell.execute_reply.started":"2024-07-12T11:43:29.848136Z","shell.execute_reply":"2024-07-12T11:43:29.853051Z"},"trusted":true},"execution_count":null,"outputs":[]}]}